from disnake import MessageInteraction

from main import disnake
from main import commands

from db_config import execute_query
from db_config import read_query

import asyncio


class UserCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # TODO —Å–¥–µ–ª–∞—Ç—å permission –ø–æ –ª–∏–¥–µ—Ä—Å–∫–æ–π —Ä–æ–ª–∏
    @commands.slash_command(name="marathon-special-task")
    async def test(self, interaction: disnake.ApplicationCommandInteraction):
        themes_view = SpecialTaskThemesDropdownView()  # –≤—ã–±–æ—Ä —Ç–µ–º—ã —Å–æ–∑–≤–æ–Ω–∞
        await interaction.response.send_message(view=themes_view,
                                                ephemeral=True)


class SpecialTaskThemesDropdown(disnake.ui.StringSelect):
    def __init__(self):
        options = [
            disnake.SelectOption(label="–¢–µ–º–∞ 1", value="1", emoji="üé®"),
            disnake.SelectOption(label="–¢–µ–º–∞ 2", value="2", emoji="üß∂"),
            disnake.SelectOption(label="–¢–µ–º–∞ 3", value="3", emoji="‚öΩ")
        ]

        super().__init__(
            placeholder="–¢–µ–º–∞ —Å–æ–∑–≤–æ–Ω–∞",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        # –æ–ø–∏—Å–∞–Ω–∏–µ embed –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        special_task_embed = None
        if self.values[0] == "1":
            special_task_embed = disnake.Embed(
                title="‚õµ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª –¥–æ–º–∞: –¢–ï–ú–ê 1",
                description="bla bla\n"
                            "1. asd\n"
                            "2. qwe\n"
                            "3. rty\n",
                color=0x1e1f22
            )
        elif self.values[0] == "2":
            special_task_embed = disnake.Embed(
                title="‚õµ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª –¥–æ–º–∞: –¢–ï–ú–ê 2",
                description="bla bla\n"
                            "1. asd\n"
                            "2. qwe\n"
                            "3. rty\n",
                color=0x1e1f22
            )
        elif self.values[0] == "3":
            special_task_embed = disnake.Embed(
                title="‚õµ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª –¥–æ–º–∞: –¢–ï–ú–ê 3",
                description="bla bla\n"
                            "1. asd\n"
                            "2. qwe\n"
                            "3. rty\n",
                color=0x1e1f22
            )

        confirm_theme_button_view = ConfirmThemeButton(special_task_embed)  # view –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await interaction.response.edit_message("", view=confirm_theme_button_view,
                                                embed=special_task_embed)


class SpecialTaskThemesDropdownView(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(SpecialTaskThemesDropdown())


class ConfirmThemeButton(disnake.ui.View):
    def __init__(self, embed):
        super().__init__()
        self.embed = embed

    @disnake.ui.button(label="–ù–∞—á–∞—Ç—å —Å–ø–µ—Ü. –∑–∞–¥–∞–Ω–∏–µ", style=disnake.ButtonStyle.blurple, emoji="üöÄ")
    async def confirmThemeButton(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        await interaction.response.edit_message(content="## –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–ø–µ—Ü. –∑–∞–¥–∞–Ω–∏–µ", embed=None, view=None)

        special_task_view = SpecialTaskButton(interaction, self.embed)
        await special_task_view.start_task()


class SpecialTaskButton(disnake.ui.View):
    def __init__(self, interaction, embed):
        super().__init__()
        self.pass_members = set()
        self.interaction = interaction
        self.embed = embed

    async def start_task(self):
        # –ø–æ–ª—É—á–∞–µ–º id –∫–∞–Ω–∞–ª–∞ –¥–∞–Ω–Ω–æ–π team
        team_id = read_query(f"SELECT id FROM teams WHERE teams.channel_id_str = \"{self.interaction.channel_id}\"")
        if team_id:
            team_id = team_id[0][0]  # –ø–æ–ª—É—á–∞–µ–º –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        else:
            await self.interaction.response.send_message(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
                                                         ephemeral=True)
            return

        time_for_special_task = 15
        special_task_view = SpecialTaskButton(self.interaction, self.embed)
        message = await self.interaction.channel.send(f"## –°–ø–µ—Ü. –∑–∞–¥–∞–Ω–∏–µ. –£ –≤–∞—Å `{time_for_special_task} —Å–µ–∫—É–Ω–¥`",
                                                      view=special_task_view, embed=self.embed)

        for remaining_seconds in range(time_for_special_task - 1, 0, -1):
            await asyncio.sleep(1)
            await message.edit(content=f"## –°–ø–µ—Ü. –∑–∞–¥–∞–Ω–∏–µ. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å `{remaining_seconds} —Å–µ–∫—É–Ω–¥`",
                               view=special_task_view, embed=self.embed)

        # –≤—ã–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞
        non_clickable_button = NonClickableSpecialTaskButton()
        await message.edit(content=f"## –°–ø–µ—Ü. –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. "
                                   f"–û—Ç–º–µ—á–µ–Ω–æ `{len(special_task_view.pass_members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`",
                           view=non_clickable_button, embed=self.embed)

        # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü –æ—Ç—á–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –ë–î
        execute_query(f"INSERT INTO special_tasks (name, team_id, complete_members) "
                      f"VALUES (\"test_name\", {team_id}, {len(special_task_view.pass_members)})")

        # –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –≤ –ë–î
        execute_query(f"UPDATE teams SET teams.special_score = teams.special_score + "
                      f"{len(special_task_view.pass_members)} / teams.members_amount * 100 "
                      f"WHERE teams.id = {team_id}")

    @disnake.ui.button(label="–°–¥–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —Å–ø–µ—Ü. –∑–∞–¥–∞–Ω–∏–µ", style=disnake.ButtonStyle.blurple, emoji="üìù")
    async def specialTaskButton(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        if interaction.user.id in self.pass_members:
            await interaction.response.send_message("–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –≤ —Å–ø–µ—Ü. –∑–∞–¥–∞–Ω–∏–∏",
                                                    ephemeral=True)
            return

        self.pass_members.add(interaction.user.id)

        member_pass_embed = disnake.Embed(
            description="–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç",
            color=0x77ecc0
        )
        member_pass_embed.set_author(name=interaction.author.display_name,
                                     icon_url=interaction.author.avatar.url)
        await interaction.response.send_message(embed=member_pass_embed)


class NonClickableSpecialTaskButton(disnake.ui.View):
    def __init__(self):
        super().__init__()

    @disnake.ui.button(label="–°–ø–µ—Ü. –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", disabled=True,
                       style=disnake.ButtonStyle.blurple, emoji="üìù")
    async def specialTaskButton(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):
        pass


def setup(bot):
    bot.add_cog(UserCommands(bot))
